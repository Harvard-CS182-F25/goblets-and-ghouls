# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class AgentConfig:
    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @property
    def spawn_ghost(self) -> builtins.bool: ...
    @spawn_ghost.setter
    def spawn_ghost(self, value: builtins.bool) -> None: ...
    @property
    def transition(self) -> builtins.list[builtins.float]: ...
    @transition.setter
    def transition(self, value: builtins.list[builtins.float]) -> None: ...

class Board:
    @property
    def agent_position(self) -> tuple[builtins.int, builtins.int]: ...
    @property
    def ghost_position(self) -> typing.Optional[tuple[builtins.int, builtins.int]]: ...
    @property
    def goblets(self) -> builtins.list[Goblet]: ...
    @property
    def wall_positions(self) -> builtins.set[tuple[builtins.int, builtins.int]]: ...
    @property
    def width(self) -> builtins.int: ...
    @property
    def height(self) -> builtins.int: ...
    def __getitem__(self, position:tuple[builtins.int, builtins.int]) -> EntityType: ...

class CameraConfig:
    @property
    def scale(self) -> builtins.float: ...
    @scale.setter
    def scale(self, value: builtins.float) -> None: ...

class EntityType:
    class Empty(EntityType):
        __match_args__ = ()
        def __new__(cls) -> EntityType.Empty: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Wall(EntityType):
        __match_args__ = ()
        def __new__(cls) -> EntityType.Wall: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Goblet(EntityType):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0:builtins.int) -> EntityType.Goblet: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Agent(EntityType):
        __match_args__ = ()
        def __new__(cls) -> EntityType.Agent: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Ghost(EntityType):
        __match_args__ = ()
        def __new__(cls) -> EntityType.Ghost: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class GGConfig:
    @property
    def agent(self) -> AgentConfig: ...
    @agent.setter
    def agent(self, value: AgentConfig) -> None: ...
    @property
    def camera(self) -> CameraConfig: ...
    @camera.setter
    def camera(self, value: CameraConfig) -> None: ...
    @property
    def goblets(self) -> GobletConfig: ...
    @goblets.setter
    def goblets(self, value: GobletConfig) -> None: ...
    @property
    def world_generation(self) -> WorldGenerationConfig: ...
    @world_generation.setter
    def world_generation(self, value: WorldGenerationConfig) -> None: ...
    @property
    def generation_seed(self) -> typing.Optional[builtins.int]: ...
    @generation_seed.setter
    def generation_seed(self, value: typing.Optional[builtins.int]) -> None: ...
    @property
    def episode_seed(self) -> typing.Optional[builtins.int]: ...
    @episode_seed.setter
    def episode_seed(self, value: typing.Optional[builtins.int]) -> None: ...
    @property
    def debug(self) -> builtins.bool: ...
    @debug.setter
    def debug(self, value: builtins.bool) -> None: ...
    @property
    def headless(self) -> builtins.bool: ...
    @headless.setter
    def headless(self, value: builtins.bool) -> None: ...

class GameState:
    @property
    def board(self) -> Board: ...
    @property
    def reward(self) -> builtins.int: ...
    @property
    def done(self) -> builtins.bool: ...
    def all_states(self) -> builtins.list[GameState]: ...
    def next_state(self, action:Action) -> GameState: ...
    def with_seed(self, seed:builtins.int) -> GameState: ...
    def step(self, action:Action) -> GameState: ...
    def reset(self) -> tuple[GameState, builtins.int]: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Goblet:
    @property
    def position(self) -> tuple[builtins.int, builtins.int]: ...
    @property
    def reward(self) -> builtins.int: ...

class GobletConfig:
    @property
    def number(self) -> builtins.int: ...
    @number.setter
    def number(self, value: builtins.int) -> None: ...
    @property
    def max_reward(self) -> builtins.int: ...
    @max_reward.setter
    def max_reward(self, value: builtins.int) -> None: ...

class WorldGenerationConfig:
    @property
    def world_width(self) -> builtins.float: ...
    @world_width.setter
    def world_width(self, value: builtins.float) -> None: ...
    @property
    def world_height(self) -> builtins.float: ...
    @world_height.setter
    def world_height(self, value: builtins.float) -> None: ...
    @property
    def num_obstacles(self) -> builtins.int: ...
    @num_obstacles.setter
    def num_obstacles(self, value: builtins.int) -> None: ...
    @property
    def obstacle_radius_cells(self) -> builtins.int: ...
    @obstacle_radius_cells.setter
    def obstacle_radius_cells(self, value: builtins.int) -> None: ...
    @property
    def cell_size(self) -> builtins.float: ...
    @cell_size.setter
    def cell_size(self, value: builtins.float) -> None: ...
    @property
    def size(self) -> tuple[builtins.int, builtins.int]:
        r"""
        Returns the size of the maze as (width, height)
        """
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Action(Enum):
    Up = ...
    Down = ...
    Left = ...
    Right = ...

    @staticmethod
    def from_int(tag:builtins.int) -> Action: ...
    def __reduce__(self) -> tuple[typing.Any, typing.Any]: ...

def parse_config(config_path:builtins.str) -> GGConfig: ...

def run(config:GGConfig, policy:typing.Optional[typing.Any]=None) -> typing.Optional[tuple[GameState, builtins.int, builtins.int]]: ...

